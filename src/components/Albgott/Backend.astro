---
import Tag from "./Tag.astro";

---

<div class="collapse collapse-arrow bg-amber-500">
  <input type="radio" name="my-accordion" />
  <div class="collapse-title text-xl font-black text-left flex flex-col items-center text-slate-800 gap-1">
    BACKEND
    <div class="flex gap-x-2 flex-wrap gap-y-2  justify-center">
      <Tag color="bg-gray-800">API REST</Tag>
      <Tag color="bg-gray-500">microservices</Tag>
      <Tag color="bg-amber-600">java</Tag>
      <Tag color="bg-lime-600">springboot</Tag>
      <Tag color="bg-fuchsia-900">event-driven</Tag>
      <Tag color="bg-orange-600">rabbitmq</Tag>
      <Tag color="bg-cyan-900">CQRS</Tag>
      <Tag color="bg-green-900">DDD</Tag>
      <Tag color="bg-violet-900">aws</Tag>
      <Tag color="bg-rose-700">flyway</Tag>
    </div>
  </div>
  <div class="collapse-content  flex flex-col gap-3 mt-1 text-slate-800 md:px-14">
    <img class="rounded-xl" src="/images/frontend-schema.jpg"/>

    <p class="mb-6">The application is built upon a microservices architecture and leverages the power of Java Spring Boot. Let's take a closer look at the core components that make our system remarkably efficient and adaptable.</p>

    <h2 class="text-2xl font-bold mb-4">Microservices Architecture</h2>
    <p class="mb-6">Our system is structured using a microservices architecture. This approach involves breaking down our application into a series of microservices, each dedicated to a specific task. This design offers outstanding scalability and maintainability as each microservice can be developed, deployed, and scaled independently.</p>

    <h2 class="text-2xl font-bold mb-4">Java Spring Boot</h2>
    <p class="mb-6">Our microservices are developed using Java Spring Boot. This framework provides an agile development environment with preconfigured settings and productivity-enhancing tools. Spring Boot's integration capabilities further streamline our architecture.</p>

    <h2 class="text-2xl font-bold mb-4">Gateway Eureka Service</h2>
    <p class="mb-6">To manage and facilitate communication between microservices, we employ the Gateway Eureka Service. Think of it as a centralized directory that enables seamless discovery and registration of microservices. This dynamic interaction simplifies cooperation between components.</p>

    <h2 class="text-2xl font-bold mb-4">Config Server and Repository</h2>
    <p class="mb-6">Ensuring consistent configuration across microservices is essential. This is where the Config Server and its repository come into play. The Config Server serves configurations centrally, allowing efficient changes to be made in a shared repository, ensuring uniformity throughout the application.</p>

    <h2 class="text-2xl font-bold mb-4">Independent Databases</h2>
    <p class="mb-6">Each microservice operates with its own dedicated database. This approach ensures data isolation and prevents cross-contamination. Furthermore, it allows for tailored database technology choices to meet the specific requirements of each microservice.</p>

    <h2 class="text-2xl font-bold mb-4">RabbitMQ Communication and Events</h2>
    <p class="mb-6">Microservices communicate asynchronously using RabbitMQ. Through events, microservices notify each other of important occurrences, enabling flexible and decoupled collaboration between components. This asynchronous communication enhances system responsiveness.</p>

    <h2 class="text-2xl font-bold mb-4">Database Migration with Flyway</h2>
    <p class="mb-6">To ensure database consistency as our application evolves, we employ Flyway. This tool automates database migrations, simplifying the implementation of changes to database structure and data without disruptions.</p>

  </div>
</div>